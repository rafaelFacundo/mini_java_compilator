PARSER_BEGIN(MyParser)

import Syntaxtree.*;
import Syntaxtree.visitor.*;
import java.io.IOException;
import IRtree.*;
import Temp.*;
import utils.*;

public class MyParser {
    public static void main(String[] args) throws ParseException, TokenMgrError, IOException, Exception{
    try {
        java.io.FileInputStream file = new java.io.FileInputStream(new java.io.File(args[0]));
        Program p = new MyParser(file).Prog();
        
        PrettyPrintVisitor ppvisitor = new PrettyPrintVisitor();
        p.accept(ppvisitor);

        SymbolTableVisitor symbol_table_visitor = new SymbolTableVisitor();
        p.accept(symbol_table_visitor);

        TypeVeryfier type_visitor = new TypeVeryfier(symbol_table_visitor);
        p.accept(type_visitor);

        Mips.MipsFrame frameTeste = new Mips.MipsFrame();
        IRVisitor visitorIntermediario = new IRVisitor(type_visitor, frameTeste);
        p.accept(visitorIntermediario);


        
        System.out.println("Success");
    } catch(Exception e) {
        System.out.println(e);
        System.out.println("Failed");
    }
    }
}

PARSER_END(MyParser)

TOKEN : {
    < INT: "int" >
    | < BOOLEAN: ("boolean") >
    | < IF: ("if") >
    | < ELSE: ("else") >
    | < WHILE: ("while") >
    | < TRUE: ("true") >
    | < FALSE: ("false") >
    | < THIS: ("this") >
    | < NEW: ("new") >
    | < PLUS: ("+") >
    | < MINUS: ("-") >
    | < MULT: ("*") >
    | < LOGIC_AND: ("&&") >
    | < LOGIC_NOT: ("!") >
    | < SMALLER: ("<") >
    | < EQUAL: ("=") >
    | < LENGTH: ("length") >
    | < SYSTEM_OUT_PRINTLN: ("System.out.println") >
    | < PUBLIC: ("public") >
    | < STATIC: ("static") >
    | < VOID: ("void") >
    | < MAIN: ("main") >
    | < STRING: ("String") >
    | < CLASS: ("class") >
    | < INTERFACE: ("interface") >
    | < EXTENDS: ("extends") >
    | < IMPLEMENTS: ("implements") >
    | < RETURN: ("return") >
    | < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT> | "_")*>
    | < #LETTER: ["a"-"z", "A"-"Z"] >
    | < #DIGIT: ["0"-"9"]>
    | < INTEGER_LITERAL: (["0"-"9"])+ >
}

TOKEN: {
    <DOT: ".">
    | <COMMA: ",">
    | <SCOLON: ";">
    | <LPAR: "(">
    | <RPAR: ")">
    | <LBRACKET: "[">
    | <RBRACKET: "]">
    | <LBRACE: "{">
    | <RBRACE: "}">
}

SKIP : {
    " "
    | "\t"
    | "\n"
    | "\r"
    | <"//" (~["\n"])*>
    | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

Program Prog() :
{
    MainClass mc;
    ClassDecl cd;
    ClassDeclList cl = new ClassDeclList();
}
{
    mc = MainClass()
    (cd = ClassDeclaration() {cl.addElement(cd);})*
    <EOF>

    {return new Program(mc, cl);}
}

MainClass MainClass() :
{
    Identifier ci, ma;
    Statement s;
}
{
    <CLASS> ci = ID() <LBRACE>
        <PUBLIC> <STATIC> <VOID> <MAIN> <LPAR> <STRING> <LBRACKET> <RBRACKET> ma = ID() <RPAR> <LBRACE>
            s = Statement()
        <RBRACE>
    <RBRACE>

    {return new MainClass(ci, ma, s);}
}

ClassDecl ClassDeclaration() :
{
    Identifier id1, id2 = null;
    VarDecl vd; VarDeclList vl = new VarDeclList();
    MethodDecl md; MethodDeclList ml = new MethodDeclList();
}
{
    <CLASS> id1 = ID()
    (<EXTENDS> id2 = ID())? <LBRACE>
        (vd = VarDeclaration() {vl.addElement(vd);})* (md = MethodDeclaration() {ml.addElement(md);})*
    <RBRACE>

    {return (id2 == null) ? new ClassDeclSimple(id1, vl, ml) : new ClassDeclExtends(id1, id2, vl, ml);}
}

VarDecl VarDeclaration() :
{
    Type t; Identifier i;
}
{
    t = Type() i = ID() <SCOLON>

    {return new VarDecl(t, i);}
}

MethodDecl MethodDeclaration() :
{
    Type t, taux; Identifier i, iaux; Exp e; MethodDecl md; VarDecl vd; Statement st;

    FormalList fl = new FormalList(); VarDeclList vl = new VarDeclList(); StatementList sl = new StatementList();
}
{
    <PUBLIC> t = Type() i = ID() <LPAR>
        (taux = Type() iaux = ID() {fl.addElement(new Formal(taux, iaux));} ( "," taux = Type() iaux = ID() {fl.addElement(new Formal(taux, iaux));})* )?
    <RPAR> <LBRACE>
        (LOOKAHEAD(2) vd = VarDeclaration() {vl.addElement(vd);})*
        (st = Statement() {sl.addElement(st);})*
        <RETURN> e = Expression() <SCOLON>
    <RBRACE>
    {return new MethodDecl(t, i, fl, vl, sl, e);}
}

Type Type() :
{
    Identifier id;
}
{
    LOOKAHEAD(2)
    <INT> <LBRACKET> <RBRACKET> {return new IntArrayType();}
    | <INT> {return new IntegerType();}
    | <BOOLEAN> {return new BooleanType();}
    | id = ID() {return new IdentifierType(id.toString());} // ver se da certo
}

Statement Statement() :
{
   Statement s, s2;
   Exp e, e2; Identifier id;
   StatementList sl = new StatementList();
}
{   
    LOOKAHEAD(2)
    <LBRACE> (s = Statement() {sl.addElement(s);})* <RBRACE> { return new Block(sl); }
    | <IF> <LPAR> e = Expression() <RPAR> s = Statement() <ELSE> s2 = Statement() { return new If(e, s, s2); }
    | <WHILE> <LPAR> e = Expression() <RPAR> s = Statement() { return new While(e, s); }
    | <SYSTEM_OUT_PRINTLN> <LPAR> e = Expression() <RPAR> <SCOLON> { return new Print(e); }
    | LOOKAHEAD(2) 
     id = ID() <EQUAL> e = Expression() <SCOLON> { return new Assign(id, e); }
    | LOOKAHEAD(2) 
     id = ID() <LBRACKET> e = Expression() <RBRACKET> <EQUAL> e2 = Expression() <SCOLON> { return new ArrayAssign(id, e, e2); }
}

Exp Expression() :
{
    Exp e1;
}
{
    e1 = Expr1() (LOOKAHEAD(2) e1 = Expr2(e1))* // ((((a+b)+c)+d)+e)
    { return e1; }
}

Exp Expr1() :
{
    Exp e, e2;
    Token t;
    Identifier id;
}
{
    <THIS> { e = new This(); return e; }
    | <TRUE> { e = new True(); return e; }
    | <FALSE> { e = new False(); return e; }
    | t = <INTEGER_LITERAL> { e = new IntegerLiteral(Integer.parseInt(t.image)); return e; }
    | id = ID() { e = new IdentifierExp(id.toString()); return e; }
    | <LOGIC_NOT> e2 = Expression() { e = new Not(e2); return e; }
    | <LPAR> e2 = Expression() <RPAR> { e = e2; return e; }
    | LOOKAHEAD(2) 
      <NEW> <INT> <LBRACKET> e2 = Expression() <RBRACKET> { e = new NewArray(e2); return e; }
    | <NEW> id = ID() <LPAR> <RPAR> { e = new NewObject(id); return e; }
}

Exp Expr2(Exp left_exp) :
{
    Exp right_exp; Exp final_exp;
    Identifier id;
    ExpList el = new ExpList();
}
{
    <LOGIC_AND> right_exp = Expression() { return new And(left_exp, right_exp); }
    | <SMALLER> right_exp = Expression() { return new LessThan(left_exp, right_exp); }
    | <PLUS> right_exp = Expression() { return new Plus(left_exp, right_exp); }
    | <MINUS> right_exp = Expression() { return new Minus(left_exp, right_exp); }
    | <MULT> right_exp = Expression() { return new Times(left_exp, right_exp); }
    | <LBRACKET> right_exp = Expression() <RBRACKET> { return new ArrayLookup(left_exp, right_exp); }
    | LOOKAHEAD(2) 
      <DOT> <LENGTH> { return new ArrayLength(left_exp); }
    | <DOT> id = ID() <LPAR> ( right_exp = Expression() { el.addElement(right_exp);}
        ( <COMMA> right_exp = Expression() { el.addElement(right_exp);} )* )? <RPAR> { return new Call(left_exp, id, el); }
}

Identifier ID() : {Token t;}
{ t = <IDENTIFIER> {return new Identifier(t.image);}}
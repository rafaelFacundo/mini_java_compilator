/* Generated By:JavaCC: Do not edit this line. MyParser.java */
import Syntaxtree.*;
import Syntaxtree.visitor.*;
import java.io.IOException;
import IRtree.*;
import Temp.*;
import utils.*;

public class MyParser implements MyParserConstants {
    public static void main(String[] args) throws ParseException, TokenMgrError, IOException, Exception{
    try {
        java.io.FileInputStream file = new java.io.FileInputStream(new java.io.File(args[0]));
        Program p = new MyParser(file).Prog();

        PrettyPrintVisitor ppvisitor = new PrettyPrintVisitor();
        p.accept(ppvisitor);

        SymbolTableVisitor symbol_table_visitor = new SymbolTableVisitor();
        p.accept(symbol_table_visitor);

        TypeVeryfier type_visitor = new TypeVeryfier(symbol_table_visitor);
        p.accept(type_visitor);

        Mips.MipsFrame frameTeste = new Mips.MipsFrame();
        IRVisitor visitorIntermediario = new IRVisitor(type_visitor, frameTeste);
        p.accept(visitorIntermediario);



        System.out.println("Success");
    } catch(Exception e) {
        System.out.println(e);
        System.out.println("Failed");
    }
    }

  static final public Program Prog() throws ParseException {
    MainClass mc;
    ClassDecl cd;
    ClassDeclList cl = new ClassDeclList();
    mc = MainClass();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      cd = ClassDeclaration();
                              cl.addElement(cd);
    }
    jj_consume_token(0);
     {if (true) return new Program(mc, cl);}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
    Identifier ci, ma;
    Statement s;
    jj_consume_token(CLASS);
    ci = ID();
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAR);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    ma = ID();
    jj_consume_token(RPAR);
    jj_consume_token(LBRACE);
    s = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
     {if (true) return new MainClass(ci, ma, s);}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDeclaration() throws ParseException {
    Identifier id1, id2 = null;
    VarDecl vd; VarDeclList vl = new VarDeclList();
    MethodDecl md; MethodDeclList ml = new MethodDeclList();
    jj_consume_token(CLASS);
    id1 = ID();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      id2 = ID();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      vd = VarDeclaration();
                                vl.addElement(vd);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      md = MethodDeclaration();
                                                                                 ml.addElement(md);
    }
    jj_consume_token(RBRACE);
     {if (true) return (id2 == null) ? new ClassDeclSimple(id1, vl, ml) : new ClassDeclExtends(id1, id2, vl, ml);}
    throw new Error("Missing return statement in function");
  }

  static final public VarDecl VarDeclaration() throws ParseException {
    Type t; Identifier i;
    t = Type();
    i = ID();
    jj_consume_token(SCOLON);
     {if (true) return new VarDecl(t, i);}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDeclaration() throws ParseException {
    Type t, taux; Identifier i, iaux; Exp e; MethodDecl md; VarDecl vd; Statement st;

    FormalList fl = new FormalList(); VarDeclList vl = new VarDeclList(); StatementList sl = new StatementList();
    jj_consume_token(PUBLIC);
    t = Type();
    i = ID();
    jj_consume_token(LPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case IDENTIFIER:
      taux = Type();
      iaux = ID();
                                    fl.addElement(new Formal(taux, iaux));
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        taux = Type();
        iaux = ID();
                                                                                                             fl.addElement(new Formal(taux, iaux));
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
      vd = VarDeclaration();
                                             vl.addElement(vd);
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case SYSTEM_OUT_PRINTLN:
      case IDENTIFIER:
      case LBRACE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      st = Statement();
                           sl.addElement(st);
    }
    jj_consume_token(RETURN);
    e = Expression();
    jj_consume_token(SCOLON);
    jj_consume_token(RBRACE);
     {if (true) return new MethodDecl(t, i, fl, vl, sl, e);}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
    Identifier id;
    if (jj_2_2(2)) {
      jj_consume_token(INT);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                 {if (true) return new IntArrayType();}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
        jj_consume_token(INT);
             {if (true) return new IntegerType();}
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
                 {if (true) return new BooleanType();}
        break;
      case IDENTIFIER:
        id = ID();
                 {if (true) return new IdentifierType(id.toString());}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
   Statement s, s2;
   Exp e, e2; Identifier id;
   StatementList sl = new StatementList();
    if (jj_2_3(2)) {
      jj_consume_token(LBRACE);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case WHILE:
        case SYSTEM_OUT_PRINTLN:
        case IDENTIFIER:
        case LBRACE:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        s = Statement();
                               sl.addElement(s);
      }
      jj_consume_token(RBRACE);
                                                               {if (true) return new Block(sl);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(IF);
        jj_consume_token(LPAR);
        e = Expression();
        jj_consume_token(RPAR);
        s = Statement();
        jj_consume_token(ELSE);
        s2 = Statement();
                                                                                    {if (true) return new If(e, s, s2);}
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LPAR);
        e = Expression();
        jj_consume_token(RPAR);
        s = Statement();
                                                               {if (true) return new While(e, s);}
        break;
      case SYSTEM_OUT_PRINTLN:
        jj_consume_token(SYSTEM_OUT_PRINTLN);
        jj_consume_token(LPAR);
        e = Expression();
        jj_consume_token(RPAR);
        jj_consume_token(SCOLON);
                                                                     {if (true) return new Print(e);}
        break;
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_4(2)) {
          id = ID();
          jj_consume_token(EQUAL);
          e = Expression();
          jj_consume_token(SCOLON);
                                                   {if (true) return new Assign(id, e);}
        } else if (jj_2_5(2)) {
          id = ID();
          jj_consume_token(LBRACKET);
          e = Expression();
          jj_consume_token(RBRACKET);
          jj_consume_token(EQUAL);
          e2 = Expression();
          jj_consume_token(SCOLON);
                                                                                           {if (true) return new ArrayAssign(id, e, e2);}
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Expression() throws ParseException {
    Exp e1;
    e1 = Expr1();
    label_8:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_8;
      }
      e1 = Expr2(e1);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp Expr1() throws ParseException {
    Exp e, e2;
    Token t;
    Identifier id;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      jj_consume_token(THIS);
             e = new This(); {if (true) return e;}
      break;
    case TRUE:
      jj_consume_token(TRUE);
               e = new True(); {if (true) return e;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                e = new False(); {if (true) return e;}
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                              e = new IntegerLiteral(Integer.parseInt(t.image)); {if (true) return e;}
      break;
    case IDENTIFIER:
      id = ID();
                  e = new IdentifierExp(id.toString()); {if (true) return e;}
      break;
    case LOGIC_NOT:
      jj_consume_token(LOGIC_NOT);
      e2 = Expression();
                                      e = new Not(e2); {if (true) return e;}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      e2 = Expression();
      jj_consume_token(RPAR);
                                        e = e2; {if (true) return e;}
      break;
    default:
      jj_la1[10] = jj_gen;
      if (jj_2_7(2)) {
        jj_consume_token(NEW);
        jj_consume_token(INT);
        jj_consume_token(LBRACKET);
        e2 = Expression();
        jj_consume_token(RBRACKET);
                                                            e = new NewArray(e2); {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          jj_consume_token(NEW);
          id = ID();
          jj_consume_token(LPAR);
          jj_consume_token(RPAR);
                                      e = new NewObject(id); {if (true) return e;}
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp Expr2(Exp left_exp) throws ParseException {
    Exp right_exp; Exp final_exp;
    Identifier id;
    ExpList el = new ExpList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOGIC_AND:
      jj_consume_token(LOGIC_AND);
      right_exp = Expression();
                                           {if (true) return new And(left_exp, right_exp);}
      break;
    case SMALLER:
      jj_consume_token(SMALLER);
      right_exp = Expression();
                                           {if (true) return new LessThan(left_exp, right_exp);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
      right_exp = Expression();
                                        {if (true) return new Plus(left_exp, right_exp);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
      right_exp = Expression();
                                         {if (true) return new Minus(left_exp, right_exp);}
      break;
    case MULT:
      jj_consume_token(MULT);
      right_exp = Expression();
                                        {if (true) return new Times(left_exp, right_exp);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      right_exp = Expression();
      jj_consume_token(RBRACKET);
                                                       {if (true) return new ArrayLookup(left_exp, right_exp);}
      break;
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_8(2)) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
                       {if (true) return new ArrayLength(left_exp);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          id = ID();
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
          case FALSE:
          case THIS:
          case NEW:
          case LOGIC_NOT:
          case IDENTIFIER:
          case INTEGER_LITERAL:
          case LPAR:
            right_exp = Expression();
                                                          el.addElement(right_exp);
            label_9:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case COMMA:
                ;
                break;
              default:
                jj_la1[12] = jj_gen;
                break label_9;
              }
              jj_consume_token(COMMA);
              right_exp = Expression();
                                             el.addElement(right_exp);
            }
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
                                                                                       {if (true) return new Call(left_exp, id, el);}
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Identifier ID() throws ParseException {
                   Token t;
    t = jj_consume_token(IDENTIFIER);
                    {if (true) return new Identifier(t.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_25() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(SMALLER)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(LOGIC_AND)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(LOGIC_NOT)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(SYSTEM_OUT_PRINTLN)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000000,0x4000000,0x20000006,0x80000,0x0,0x20000006,0x20040028,0x20000006,0x20040028,0x40028,0x200041c0,0x200,0x0,0x200043c0,0xbc00,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x4,0x0,0x100,0x0,0x100,0x0,0x11,0x0,0x4,0x11,0x40,0x2,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 8; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
